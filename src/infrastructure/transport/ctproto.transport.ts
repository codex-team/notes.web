import { CTProtoClient } from 'ctproto';

interface AuthRequestPayload {
  token: string;
}

interface AuthResponsePayload {
  userId: string;
  username: string;
}

interface ApiRequest {
  messageId: string;
  type: string;
  payload: any;
}

interface ApiResponse {
  messageId: string;
  type: string;
  payload: any;
}

interface ApiUpdate {
  messageId: string;
  type: string;
  payload: any;
}

export default class CtprotoTransport {
  private client: CTProtoClient<
    AuthRequestPayload,
    AuthResponsePayload,
    ApiRequest,
    ApiResponse,
    ApiUpdate
  >;

  constructor(apiUrl: string, authToken: string) {
    this.client = new CTProtoClient<AuthRequestPayload, AuthResponsePayload, ApiRequest, ApiResponse, ApiUpdate>({
      apiUrl,
      authRequestPayload: { token: authToken },
      onAuth: (response) => {
        console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', response);
      },
      onMessage: (message) => {
        console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', message);
      },
      disableLogs: false,
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   * @param type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param payload - –î–∞–Ω–Ω—ã–µ
   */
  public async send(type: string, payload: any): Promise<ApiResponse> {
    return this.client.send(
      type,
      payload
    );
  }
}
